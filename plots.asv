function varargout = plots(varargin)
gui_Singleton = 1;
gui_State = struct('gui_Name',       mfilename, ...
                   'gui_Singleton',  gui_Singleton, ...
                   'gui_OpeningFcn', @plots_OpeningFcn, ...
                   'gui_OutputFcn',  @plots_OutputFcn, ...
                   'gui_LayoutFcn',  [] , ...
                   'gui_Callback',   []);
if nargin && ischar(varargin{1})
    gui_State.gui_Callback = str2func(varargin{1});
end
if nargout
    [varargout{1:nargout}] = gui_mainfcn(gui_State, varargin{:});
else
    gui_mainfcn(gui_State, varargin{:});
end

function plots_OpeningFcn(hObject, eventdata, handles, varargin)
handles.output = hObject;
guidata(hObject, handles);

function varargout = plots_OutputFcn(hObject, eventdata, handles) 
varargout{1} = handles.output;


% --- Executes when selected object is changed in outType.
function outType_SelectionChangeFcn(hObject, eventdata, handles)

global global_struct;

slid1 = global_struct.slid1;
slid2 = global_struct.slid2;
slid3 = global_struct.slid3;
slid4 = global_struct.slid4;
slid5 = global_struct.slid5;
slid6 = global_struct.slid6;
slid7 = global_struct.slid7;
slid8 = global_struct.slid8;
slid9 = global_struct.slid9;


outputSampleRate = global_struct.fs;
firType = global_struct.firType;
x = global_struct.x;

y=fft(x);
y=fftshift(y);
y_abs=abs(y);
y_ang=angle(y);


if handles.fir == 1
    %fir filter
    if firType == 1
        %equiripple
        f=fir_lp_equiripple(outputSampleRate,50,170,180);
        x1=filter(f,x);
        f=fir_bp_equiripple(outputSampleRate,50,160,170,310,320);
        x2=filter(f,x);
        f=fir_bp_equiripple(outputSampleRate,50,300,310,600,610);
        x3=filter(f,x);
        f=fir_bp_equiripple(outputSampleRate,50,590,600,1000,1010);
        x4=filter(f,x);
        f=fir_bp_equiripple(outputSampleRate,50,990,1000,3000,3010);
        x5=filter(f,x);
        f=fir_bp_equiripple(outputSampleRate,50,2990,3000,6000,6010);
        x6=filter(f,x);
        f=fir_bp_equiripple(outputSampleRate,50,5990,6000,12000,12010);
        x7=filter(f,x);
        f=fir_bp_equiripple(outputSampleRate,50,11990,12000,14000,14010);
        x8=filter(f,x);
        f=fir_bp_equiripple(outputSampleRate,50,13990,14000,16000,16010);
        x9=filter(f,x);
       
    elseif firType == 2
        %least-square
        f=fir_lp_least_squares(outputSampleRate,50,170,180);
        x1=filter(f,x);
        f=fir_bp_least_squares(outputSampleRate,50,160,170,310,320);
        x2=filter(f,x);
        f=fir_bp_least_squares(outputSampleRate,50,300,310,600,610);
        x3=filter(f,x);
        f=fir_bp_least_squares(outputSampleRate,50,590,600,1000,1010);
        x4=filter(f,x);
        f=fir_bp_least_squares(outputSampleRate,50,990,1000,3000,3010);
        x5=filter(f,x);
        f=fir_bp_least_squares(outputSampleRate,50,2990,3000,6000,6010);
        x6=filter(f,x);
        f=fir_bp_least_squares(outputSampleRate,50,5990,6000,12000,12010);
        x7=filter(f,x);
        f=fir_bp_least_squares(outputSampleRate,50,11990,12000,14000,14010);
        x8=filter(f,x);
        f=fir_bp_least_squares(outputSampleRate,50,13990,14000,16000,16010);
        x9=filter(f,x);
    elseif firType == 3
        %rectangular
         f=fir_lp_window_rectangular(outputSampleRate,50,170);
        x1=filter(f,x);
        f=fir_bp_window_rectangular(outputSampleRate,50,170,310);
        x2=filter(f,x);
        f=fir_bp_window_rectangular(outputSampleRate,50,310,600);
        x3=filter(f,x);
        f=fir_bp_window_rectangular(outputSampleRate,50,600,1000);
        x4=filter(f,x);
        f=fir_bp_window_rectangular(outputSampleRate,50,1000,3000);
        x5=filter(f,x);
        f=fir_bp_window_rectangular(outputSampleRate,50,3000,6000);
        x6=filter(f,x);
        f=fir_bp_window_rectangular(outputSampleRate,50,6000,12000);
        x7=filter(f,x);
        f=fir_bp_window_rectangular(outputSampleRate,50,12000,14000);
        x8=filter(f,x);
        f=fir_bp_window_rectangular(outputSampleRate,50,14000,16000);
        x9=filter(f,x);
    elseif firType == 4
        %Chebyshev
        f=fir_lp_window_chebyshev(outputSampleRate,50,170);
        x1=filter(f,x);
        f=fir_bp_window_chebyshev(outputSampleRate,50,170,310);
        x2=filter(f,x);
        f=fir_bp_window_chebyshev(outputSampleRate,50,310,600);
        x3=filter(f,x);
        f=fir_bp_window_chebyshev(outputSampleRate,50,600,1000);
        x4=filter(f,x);
        f=fir_bp_window_chebyshev(outputSampleRate,50,1000,3000);
        x5=filter(f,x);
        f=fir_bp_window_chebyshev(outputSampleRate,50,3000,6000);
        x6=filter(f,x);
        f=fir_bp_window_chebyshev(outputSampleRate,50,6000,12000);
        x7=filter(f,x);
        f=fir_bp_window_chebyshev(outputSampleRate,50,12000,14000);
        x8=filter(f,x);
        f=fir_bp_window_chebyshev(outputSampleRate,50,14000,16000);
        x9=filter(f,x);
    elseif firType == 5
        %hamming
        f=fir_lp_window_hamming(outputSampleRate,50,170);
        x1=filter(f,x);
        f=fir_bp_window_hamming(outputSampleRate,50,170,310);
        x2=filter(f,x);
        f=fir_bp_window_hamming(outputSampleRate,50,310,600);
        x3=filter(f,x);
        f=fir_bp_window_hamming(outputSampleRate,50,600,1000);
        x4=filter(f,x);
        f=fir_bp_window_hamming(outputSampleRate,50,1000,3000);
        x5=filter(f,x);
        f=fir_bp_window_hamming(outputSampleRate,50,3000,6000);
        x6=filter(f,x);
        f=fir_bp_window_hamming(outputSampleRate,50,6000,12000);
        x7=filter(f,x);
        f=fir_bp_window_hamming(outputSampleRate,50,12000,14000);
        x8=filter(f,x);
        f=fir_bp_window_hamming(outputSampleRate,50,14000,16000);
        x9=filter(f,x);
    else
        %blackman-harris
        f=fir_lp_window_blackman_harris(outputSampleRate,50,170);
        x1=filter(f,x);
        f=fir_bp_window_blackmax_harris(outputSampleRate,50,170,310);
        x2=filter(f,x);
        f=fir_bp_window_blackmax_harris(outputSampleRate,50,310,600);
        x3=filter(f,x);
        f=fir_bp_window_blackmax_harris(outputSampleRate,50,600,1000);
        x4=filter(f,x);
        f=fir_bp_window_blackmax_harris(outputSampleRate,50,1000,3000);
        x5=filter(f,x);
        f=fir_bp_window_blackmax_harris(outputSampleRate,50,3000,6000);
        x6=filter(f,x);
        f=fir_bp_window_blackmax_harris(outputSampleRate,50,6000,12000);
        x7=filter(f,x);
        f=fir_bp_window_blackmax_harris(outputSampleRate,50,12000,14000);
        x8=filter(f,x);
        f=fir_bp_window_blackmax_harris(outputSampleRate,50,14000,16000);
        x9=filter(f,x);
    end
else
    %iir filter
    f=iir_lp_butterworth(outputSampleRate,50,170);
    x1=filter(f,x);
    f=iir_bp_butterworth(outputSampleRate,50,170,310);
    x2=filter(f,x);
    f=iir_bp_butterworth(outputSampleRate,50,310,600);
    x3=filter(f,x);
    f=iir_bp_butterworth(outputSampleRate,50,600,1000);
    x4=filter(f,x);
    f=iir_bp_butterworth(outputSampleRate,50,1000,3000);
    x5=filter(f,x);
    f=iir_bp_butterworth(outputSampleRate,50,3000,6000);
    x6=filter(f,x);
    f=iir_bp_butterworth(outputSampleRate,50,6000,12000);
    x7=filter(f,x);
    f=iir_bp_butterworth(outputSampleRate,50,12000,14000);
    x8=filter(f,x);
    f=iir_bp_butterworth(outputSampleRate,50,14000,16000);
    x9=filter(f,x);
end
y1=fft(x1);
y2=fft(x2);
y3=fft(x3);
y4=fft(x4);
y5=fft(x5);
y6=fft(x6);
y7=fft(x7);
y8=fft(x8);
y9=fft(x9);
y1=fftshift(y1);
y2=fftshift(y2);
y3=fftshift(y3);
y4=fftshift(y4);
y5=fftshift(y5);
y6=fftshift(y6);
y7=fftshift(y7);
y8=fftshift(y8);
y9=fftshift(y9);
y1_abs=abs(y1);
y1_ang=angle(y1);
y2_abs=abs(y2);
y2_ang=angle(y2);
y3_abs=abs(y3);
y3_ang=angle(y3);
y4_abs=abs(y4);
y4_ang=angle(y4);
y5_abs=abs(y5);
y5_ang=angle(y5);
y6_abs=abs(y6);
y6_ang=angle(y6);
y7_abs=abs(y7);
y7_ang=angle(y7);
y8_abs=abs(y8);
y8_ang=angle(y8);
y9_abs=abs(y9);
y9_ang=angle(y9);
x1s=x1*10^(slid1/20);
x2s=x2*10^(slid2/20);
x3s=x3*10^(slid3/20);
x4s=x4*10^(slid4/20);
x5s=x5*10^(slid5/20);
x6s=x6*10^(slid6/20);
x7s=x7*10^(slid7/20);
x8s=x8*10^(slid8/20);
x9s=x9*10^(slid9/20);
%amplitude

total_x = x1s+x2s+x3s+x4s+x5s+x6s+x7s+x8s+x9s;
total_y=fft(total_x);
total_y=fftshift(total_y);
total_y_abs=abs(total_y);
total_y_ang=angle(total_y);


%var total_x
%x-axis  ==> time
%y-axis  ==> x(amplitude)

%var total_y_abs/total_y_ang
%x-axis  ==> frequ
%y-axis  ==> x(magnitude/angle)

ax = axes('Parent',f);  %corrected from my original version
  plot3 (ax, [a1 a2 a3],[b1 b2 b3],[c1 c2 c3], 'Marker','o','LineStyle','-');
  grid(ax, 'on')
  rotate3d(ax, 'on')

if eventdata.NewValue == band1
elseif eventdata.NewValue == band2   
elseif eventdata.NewValue == band3
elseif eventdata.NewValue == band4
elseif eventdata.NewValue == band5
elseif eventdata.NewValue == band6
elseif eventdata.NewValue == band7
elseif eventdata.NewValue == band8
elseif eventdata.NewValue == band9
else
    
end
